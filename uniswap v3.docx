‚Äî--------------
NON-FUNGIBLE LIQUIDITY
As a result, in v3, the pool contract does not implement the ERC-20 standard. Anyone can create an ERC-20 token contract in the periphery that makes a liquidity position more fungible, but it will have to have additional logic to handle distribution of, or reinvestment of, collected fees. Alternatively, anyone could create a periphery contract that wraps an individual liquidity position (including collected fees) in an ERC-721 non-fungible token.

So it means LPTokens are erc721 which can be converted to erc20 tokens using the periphery contracts by paying the fees ? 
‚Äî------------------
A pool in Uniswap v2 stores only the most recent value of this price accumulator‚Äîthat is, the value as of the last block in which a swap occurred. When computing average prices in Uniswap v2, it is the responsibility of the external caller to provide the previous value of the price accumulator. With many users, each will have to provide their own methodology for checkpointing previous values of the accumulator, or coordinate on a shared method to reduce  costs. And there is no way to guarantee that every block in which the pool is touched will be reflected in the accumulator.

Last 2 lines
‚Äî-----------
setPosition. The setPosition function allows a liquidity provider to update their position. Two of the arguments to setPosition ‚ÄîlowerTick and upperTick‚Äî when combined with the msg.sender, together specify a position. The function takes one additional parameter, liquidityDelta, to specify how much virtual liquidity the user wants to add or (if negative) remove
‚Äî------------
In-range liquidity refers to the liquidity contained in any positions which span both sides of the spot price.
‚Äî-------------
Whitepaper end
‚Äî-------------

 As an illustration, consider the following example. Consider an ETH-USDC pool and assume the current price of ETH is 2000 USDC. Two liquidity providers ùê¥ and ùêµ both start with a position worth 1000 USDC. LP ùê¥ chooses the range [1818, 2200], while LP ùêµ chooses [1667, 2400]. According to (1), this means that they provide about 240 and 128 units of liquidity, respectively. If ETH‚Äôs price now falls to 1900, the position of LP ùê¥ will consist of 288.23 USDC and ETH worth 739.40 USDC which adds up to 967.63 USDC. LP ùêµ‚Äôs position on the other hand consists of 354.54 USDC and ETH worth 617.27 USDC, i.e. 971.81 USDC in total. In particular, the LP with the smaller interval suffered a larger loss. On the other hand, LP A earns 240/128 = 1.875 times more fees on trades occurring in the range [1818, 2200] than LP 

Qs is, how the liquidity units be calculated in scenario for A and B
‚Äî---------------
FIXED INTERVAL: For ETH-USDC pools, we choose ùëé ‚àà [0.6%, 100%] where ùëé grows in steps of 0.6%. For USDT-USDC pools, we choose ùëé ‚àà [0.1%, 50%] where ùëé grows in steps of 0.1%. We choose these values to match the precision with which LPs can choose ranges in Uniswap v3. There, the tick spacing is 60 and 10 for ETH-USDC and USDT-USDC pools, respectively. So for the latter pools, the smallest possible ratio between interval bounds is 1.000110 ‚âà 1 + 0.1%.
‚Äî---------------
What is suboptimal trading ? (something related to stable tokens pair)
‚Äî---------------
For a concrete example, let‚Äôs suppose Alice wants to provide liquidity in the DAI/ETH pool from 2000 to 4000. The exact powers using base 1.0001 to get to exactly 44.7213595 and 63.24555 (the square roots of 2000 and 4000 respectively) are not integers. The closest i‚Äôs Alice could pick would be 76013 and 82945, so Alice‚Äôs price range would actually be from 2000.035002 to 4000.142653, depending on how granular the pool allows its indexes to be (they can be further restricted to be divisible by some integer).

Qs is, how are these ticks calculated ?
‚Äî-----------------

Source: Uniswap v3 whitepaper
Here f_r means the total fees in a range defined by i_l, the lower tick, and i_u, the upper tick. It says the range‚Äôs fees are equal to the total fees generated minus the fees below (f_b) the range‚Äôs low tick and the fees above (f_a) the range's high tick.

‚Äî-------------------
Xord article:
When the current ratio moves left concerning the current position, token0 (the amount of token0 in the pool) changes; if the current ratio moves right concerning the current position, the amount of token1 changes. 

In terms of smart contracts, the assets' conversion is only done when adding or removing liquidity.

Qs: why only at adding or removing liquidity ? not wehn the swapping performs, it does change the reserves in the pool.
Using ùêø and ‚àö ùëÉ is convenient because only one of them changes at a time. Price Changes when swapping within a position; liquidity changes when moving outside of the position or when liquidity is minted or burned. 
Alternatively, liquidity can be considered the amount that token1 reserves change for a given change in ‚àö ùëÉ.
Swap function takes the address of the swapper (recipient), The direction of the swap, true for token0 to token1, false for token1 to token0 (zeroForOne), the amount of the swap, which implicitly configures the amount as exact input and output (amountSpecified), the value for input will be positive while negative for output.
 
End of Xord article
‚Äî--------------------
TAIPAI article
‚Äî--------------------
The reason for a signed integer int instead of an uint is that negative power represents prices less than 1 but greater than 0
Calculate token Price:  https://www.publish0x.com/dalz-blog/an-example-how-uniswap-calculate-the-price-of-the-tokens-and-xvrnxjd 
TokenPrice = (100 ETH * ETH Price) / 100k TokenA
 

NOAH talk



		|-------|-------|-------|
ticks:	0		1		2		3

fake example with 1% ticks:

price @ 0th tick: 1.01**x = 1.01**0 = 1
price @ 1st tick: 1.01**x = 1.01**1 = 1.01
price @ 2nd tick: 1.01**x = 1.01**2 = 1.0201

basically limits the no. of intermediate ticks that you can add liq. at
E.g. not allwoed to add liq. at 1 so you can only add 0 or 2 , 
trade b/w 0 and 2 are basically they don;t have this fixed cost
that sassociated that crosses this 1 tick, so now 

real example with 1% ticks:
sqrt(1.0001)**x

x * y = k (L**2)

sqrt(x * y) = L



Going from 0 to 2 means a +0.20% price increment 

When the fee is 0.05% which has a tick spacing of 10, it means from first tick to second tick there are 9 empty ticks on which while swapping you easily jump and reach from first price point to the second price point.
QS: what if i created a pool of two highly volatile assets e.g. shib/sol, on a fee tier of 0.05%, what is its impact on tickspacing and swapping ?. 


Instead of tracking price which is the ratio of two assets, we are tracking the sqrt of price. sqrt(1.0001)**x. This formula lets us to track the sqrt of price


END OF NOAH TALK
‚Äî--------------------------------
ORACLES
V3 docs
Ticks are signed integers and can be expressed as a negative number, so for any circumstances where token0 is of a lower value than token1, a negative tick value will be returned by tickCumulative and a relative value of < 0 will be returned by a calculation of token0 in terms of token1.
An example of finding the price of WETH in a WETH / USDC pool, where WETH is token0 and USDC is token1:

You have an oracle reading that shows a return of tickCumulative as [70_000, 1_070_000], with an elapsed time between the observations of 10 seconds.We can derive the average tick over this interval by taking the difference in accumulator values (1_070_000 - 70_000 = 1_000_000), and dividing by the time elapsed (1_000_000 / 10 = 100_000).

With a tick reading of 100_000, we can find the value of token1 (USDC) in terms of token0 (WETH) by using the current tick as i in the formula p(i) = 1.0001**i (see 6.1 in the whitepaper).

1.0001**100_000 ‚âÖ 22015.5 USDC / WETH


‚Äî-----------------------------
L A T E S T
Gamma strategies article
The three strategies considered are:
Uniform strategy: liquidity is provided uniformly within the expected price range, as is the default in Uniswap v3.
Proportional strategy: liquidity within the expected price range is allocated in sub-bins within the range, with the intensity of a bin proportional to how likely the price is likely to be there according to Figure 6.
Optimal strategy: using tools from decision theory, the authors develop a model to estimate the ‚Äúoptimal‚Äù range to provide liquidity over, having as a parameter the degree of ‚Äúrisk aversion‚Äù of the liquidity provider.

DeFi Scientist article:
The idea is to choose a base liquidity range symmetric around the current price [Current -B, Current+B] and to rebalance regularly (let‚Äôs assume twice a day). As the token price moves, our initial ratio (50/50 each asset) will drift. As our token price decreases, we buy more of the token and inversely as it increases.

Now let‚Äôs assume that the price moves to X and that our portfolio is now composed of 70% T and 30% USDC. The strategy will post a new LP position at [X-B, X+B] for 30%USDC/30% T. The remaining extra 40% T is placed as a passive rebalancing order at [X,X+R] with R being the rebalancing range. At every rebalancing, we count the number of tokens we hold and redo the same process.
The unique feature of Alpha Vaults is that it rebalances passively using range orders, which significantly improves its performance. (means no swap fee and price impact also)
Rebalancing is necessary when providing concentrated liquidity on V3. For example, if you initially deposit 50% ETH and 50% USDC but the price moves a lot one way, you might be left with 80% ETH and 20% USDC. Then you‚Äôd need to somehow rebalance back to 50/50 so that you don‚Äôt run out of inventory on either side and can continue providing two-sided liquidity. One way to rebalance would be to aggressively rebalance by swapping ETH ‚Üí USDC on Uniswap to get back to 50/50, but this incurs the 0.3% trading fee and price impact.

Instead, Alpha Vaults only passively rebalances, placing a narrow range order on one side of the current price. This avoids the need to swap tokens and incur the fee and price impact.
liquidity ratio high hoony ka mtlb kiya he ?
written somewhere that:  active vaults perform much better when fees/liquidity ratio is high. so it would make sense to initially deploy strategies for those high earning pools only.
As we can see the returns of a rebalancing strategy depend on the level of realized return volatility. The strategy is expected to outperform in a trending market but underperform in a choppy market.

Cost of uniswap active management:
First, let‚Äôs look at the number of resets implied by the strategy. As we described before, with a longer time interval, fewer resets are required. The very volatile month of May leads the numbers of resets, with 1,876 for the 10-minute interval, 236 for 120-minute interval, and 63 for 1,440-minute interval. The relatively quiet month of June required much fewer resets (852, 87, and 18 respectively), thus as predicted in the beginning, periods with more price volatility imply more resets.
10 minutes rebase = 1008 rebases in a week (144/day)
30 minutes rebase = 336   rebases in a week (24/day) 
350,000 Gwei for setting or removing positions in uniswap v3 

TAIPEI Article Revision:
The price range of each tick is predefined by the system instead of being proposed by users.
Q: It means if we pick a tick i.e. 87888, the price will always be the same regardless of reverses ?
For tick variable, The reason for a signed integer int instead of an uint is that negative power represents prices less than 1 but greater than 0.
The answer to this question is rather easy, as we know that p(i) = 1.0001^i, simply takes a log with base 1.0001 on both sides of the equation‚Å¥: 
Let‚Äôs try this out, say we wanna find out the tick index of 1000000.
Now, 1.0001¬π¬≥‚Å∏¬π‚Å∂¬≤ = 999,998.678087146. Voila!
Qs: Explanation 
As each tick has a different liquidity depth, the corresponding pricing function x * y = k also won‚Äôt be the same!
Say the original pricing function is 100(x) * 1000(y) = 100000(k), with the price of X token 1000 / 100 = 10 and we‚Äôre now in an arbitrary price range [9.08, 11.08].

If the liquidity of the price range [11.08, 13.08] is the same as [9.08, 11.08], we don‚Äôt have to modify the pricing function if the price goes from 10 to 11.08, which is the boundary between two ticks.

The price of X is 1052.63 / 95 = 11.08 when the equation is 1052.63 * 95 = 100000.
Qs: if i'm not mistaken, this price is calculated from p(i) = 1.0001^i
https://tinyurl.com/root-in-liquidity 
Qs: why this root in liquidity ? doesn't it keep decreasing the constant product value ?
Let‚Äôs say if I provide liquidity in the range [1200, 2800], the capital efficiency will then be 4.24x higher than v2 with the range [0,‚àû] üòÆ There‚Äôs a capital efficiency comparison calculator, make sure to try it out!
Qs: how is this capital efficiency being calculated. 
Depending on the current price and the targeted price range, there are three scenarios:

1: current price belongs to the targeted price range
2: current price < the targeted price range
3: current price > the targeted price range
These three scenarios have disparities in whether both or only one of the two tokens and also the number of (which) tokens is required/allowed when providing liquidity.
1.001499988 = ‚àö(1.0001 * 1.0002) is the geometric mean of 1.0001 and 1.0002. The implication is that the geometric mean of two prices is the average execution price within the range of the two prices.
Thus, providing liquidity on v3, namely range orders, are essentially fee-earning reversible limit orders
Credmark article:
ic  = log ‚àö1.0001 ‚àöp (log base ‚àö1.0001 times ‚àöp)
Calculating current tick based on sqrt(price)

p(i) = 1.0001^i
Calculating price based on current tick
To calculate price at any position: p = ‚àö(y/x)
To calculate liquidity at any position: L = ‚àö(x*y)
What is the ratio of rebalancing vs fee earned ? Does the fee earned compensates the charges of rebasing fee ? 







DONE:
Uniswap v3 whitepaper
docs
Video tutorials (finamatics, whiteboard crypto)
https://10clouds.com/blog/defi/uniswap-v3-explained/#
https://arxiv.org/pdf/2110.01368 (revision req.)
https://credmark.com/blog/a-technical-analysis-of-uniswap-v3
https://ryanjameskim.medium.com/uniswap-v3-options-hedge-explainer-with-toy-example-part-1-52fd53ea4279 
https://ryanjameskim.medium.com/uniswap-v3-part-2-ticks-and-fee-acounting-explainer-with-toy-example-e9bf4d706884 (revision req.)
https://xord.com/research/uniswap-v3-power-to-liquidity-providers/
https://levelup.gitconnected.com/whats-new-in-uniswap-v3-a04a8f2673bb
Zero knowledge podcast https://zeroknowledge.fm/185-2/ (12 mints)
https://medium.com/taipei-ethereum-meetup/uniswap-v3-features-explained-in-depth-178cfe45f223 (revision req.)
https://medium.com/@jarekcoding/math-behind-uniswap-swap-part1-88dcc18a9612
https://medium.com/@jarekcoding/math-behind-uniswap-swap-part2-d51d6a37ce89
https://drive.google.com/file/d/1dRifSAXxc-6HKCKH8tcygEmHxJTKAlxp/view (rev  req.)
https://www.youtube.com/watch?v=XwPkXAeIppk
https://www.youtube.com/watch?v=cZ7QMmm7hJc
https://www.youtube.com/watch?v=_07eT2H_WVE
https://www.youtube.com/watch?v=nCtJ0eqaEf0
https://medium.com/blockchain-development-notes/a-guide-on-uniswap-v3-twap-oracle-2aa74a4a97c5 (to be continued)
https://starli.medium.com/uniswap-deep-dive-into-v3s-source-code-b141c1754bae
Mudassir bhai given
https://medium.com/gamma-strategies/expected-price-range-strategies-in-uniswap-v3-833dff253f84 
https://medium.com/charmfinance/introducing-alpha-vaults-an-lp-strategy-for-uniswap-v3-ebf500b67796 
https://medium.com/@DeFiScientist/rebalancing-vs-passive-strategies-for-uniswap-v3-liquidity-pools-754f033bdabc ( simulating returns is not fully clear ) 
https://medium.com/gamma-strategies/the-costs-of-uniswap-v3-active-management-7dd1c160fdd 
https://medium.com/taipei-ethereum-meetup/uniswap-v3-features-explained-in-depth-178cfe45f223 
https://credmark.com/blog/a-technical-analysis-of-uniswap-v3 




Article6: https://xord.com/research/uniswap-v3-power-to-liquidity-providers/ (Xord Explanation article)

Miscellaneous :
The price of tokens are calculated through the reserves in liquidity pools and maintained by arbitrageurs.
Even comparatively more no. of tokens are being on hold by users. It means a very small amount of tokens are being used to decide the price of all tokens. 
